// MCP Playground UI (React + Tailwind CSS)

import React, { useState } from 'react';
import axios from 'axios';

export default function App() {
  const [prompt, setPrompt] = useState('');
  const [response, setResponse] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleSubmit = async () => {
    setLoading(true);
    setError(null);
    setResponse(null);

    try {
      const res = await axios.post('http://localhost:8000/infer', {
        input: prompt
      });
      setResponse(res.data.output);
    } catch (err) {
      setError(err.response?.data?.detail || 'Request failed.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-4 flex flex-col items-center">
      <div className="w-full max-w-3xl bg-white shadow-lg rounded-lg p-6 mt-10">
        <h1 className="text-2xl font-bold mb-4 text-center">MCP Playground</h1>

        <textarea
          className="w-full border border-gray-300 rounded-md p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          rows={5}
          placeholder="Enter your prompt (e.g., Get user with ID 5)"
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
        />

        <button
          onClick={handleSubmit}
          disabled={loading || !prompt.trim()}
          className="mt-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
        >
          {loading ? 'Loading...' : 'Submit'}
        </button>

        {error && (
          <div className="mt-4 text-red-600 font-semibold">Error: {error}</div>
        )}

        {response && (
          <div className="mt-6">
            <h2 className="text-lg font-semibold mb-2">Response:</h2>
            <pre className="bg-gray-100 p-4 rounded border border-gray-200 overflow-auto text-sm">
              {JSON.stringify(response, null, 2)}
            </pre>
          </div>
        )}
      </div>
    </div>
  );
}
---------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>MCP Playground</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script crossorigin src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script crossorigin src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  </head>
  <body class="bg-gradient-to-r from-blue-100 to-purple-100 min-h-screen flex items-center justify-center">
    <div id="root" class="w-full max-w-3xl p-4"></div>

    <script type="text/babel">
      const { useState } = React;

      function App() {
        const [prompt, setPrompt] = useState("");
        const [response, setResponse] = useState(null);
        const [loading, setLoading] = useState(false);
        const [error, setError] = useState(null);

        const beautifyJson = (json) => {
          try {
            return JSON.stringify(json, null, 2);
          } catch {
            return json;
          }
        };

        const handleSubmit = async () => {
          setLoading(true);
          setError(null);
          setResponse(null);

          if (!prompt.trim()) {
            setError("Prompt cannot be empty.");
            setLoading(false);
            return;
          }

          try {
            const res = await axios.post("http://localhost:8000/infer", {
              input: prompt,
            });
            setResponse(res.data.output);
          } catch (err) {
            setError(err?.response?.data?.detail || "Unexpected error occurred.");
          } finally {
            setLoading(false);
          }
        };

        return (
          <div className="bg-white shadow-2xl rounded-xl p-8">
            <h1 className="text-3xl font-bold text-center text-blue-700 mb-6">MCP Prompt Playground</h1>

            <label className="block text-gray-700 font-semibold mb-2">Enter Prompt</label>
            <textarea
              className="w-full border border-gray-300 rounded-lg p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={5}
              placeholder="e.g., Get user with ID 5"
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
            />

            <div className="flex justify-between items-center mt-4">
              <button
                onClick={handleSubmit}
                disabled={loading}
                className="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50"
              >
                {loading ? <i className="fas fa-spinner fa-spin"></i> : "Submit"}
              </button>
              <button
                onClick={() => {
                  setPrompt("");
                  setResponse(null);
                  setError(null);
                }}
                className="text-gray-500 hover:underline"
              >
                Clear
              </button>
            </div>

            {error && (
              <div className="mt-4 text-red-600 bg-red-100 border border-red-300 p-3 rounded-md">
                <strong>Error:</strong> {error}
              </div>
            )}

            {response && (
              <div className="mt-6">
                <h2 className="text-lg font-semibold mb-2 text-gray-700">Response:</h2>
                <pre className="bg-gray-100 p-4 rounded border border-gray-200 overflow-auto text-sm text-gray-800">
                  {beautifyJson(response)}
                </pre>
              </div>
            )}
          </div>
        );
      }

      ReactDOM.createRoot(document.getElementById("root")).render(<App />);
    </script>
  </body>
</html>
----------------------------------------------------------
{response && (
  <div className="mt-6 space-y-4">
    <h2 className="text-xl font-semibold text-gray-800">MCP Response</h2>

    {/* MAIN RESPONSE */}
    {response.response && (
      <div className="bg-blue-50 p-4 rounded border border-blue-200">
        <h3 className="text-md font-medium text-blue-700 mb-1">Answer:</h3>
        <p className="text-gray-700 whitespace-pre-wrap">{response.response}</p>
      </div>
    )}

    {/* TOOLS USED */}
    {Array.isArray(response.tools_used) && (
      <div className="bg-green-50 p-4 rounded border border-green-200">
        <h3 className="text-md font-medium text-green-700 mb-1">Tools Used:</h3>
        <ul className="list-disc ml-5 text-gray-700">
          {response.tools_used.map((tool, idx) => (
            <li key={idx}>{tool}</li>
          ))}
        </ul>
      </div>
    )}

    {/* MCP RESULTS */}
    {response.mcp_results && (
      <div className="bg-yellow-50 p-4 rounded border border-yellow-200">
        <h3 className="text-md font-medium text-yellow-700 mb-2">MCP Results:</h3>
        {Object.entries(response.mcp_results).map(([toolName, result], idx) => (
          <div key={idx} className="mb-3">
            <strong className="text-gray-800">{toolName}</strong>
            <ul className="ml-4 list-disc text-sm text-gray-700 mt-1">
              {Array.isArray(result.content) &&
                result.content.map((item, i) => <li key={i}>{item}</li>)}
            </ul>
          </div>
        ))}
      </div>
    )}

    {/* RAW DEBUG */}
    <div className="mt-6">
      <h2 className="text-md font-medium text-gray-600 mb-1">Full JSON (Debug)</h2>
      <pre className="bg-gray-100 p-4 rounded border border-gray-200 overflow-auto text-sm text-gray-800">
        {beautifyJson(response)}
      </pre>
    </div>
  </div>
)}

