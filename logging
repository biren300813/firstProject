package com.example.logging;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.slf4j.MDC;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.web.util.ContentCachingRequestWrapper;
import org.springframework.web.util.ContentCachingResponseWrapper;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

@Component
public class GraphqlHttpAuditFilter extends OncePerRequestFilter {

    private static final Logger log = LoggerFactory.getLogger("SPLUNK.AUDIT");
    private static final ObjectMapper MAPPER = new ObjectMapper();

    @Value("${spring.application.name:app}")
    private String appName;

    // Customize these header names if your gateway sets them differently
    private static final String HDR_CORRELATION_ID = "x-correlation-id";
    private static final String HDR_CONSUMER       = "x-consumer";

    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) {
        // Narrow to GraphQL endpoint if you want only GraphQL traffic
        // return !"/graphql".equals(request.getRequestURI());
        return false; // log all requests; adjust to your needs
    }

    @Override
    protected void doFilterInternal(HttpServletRequest req, HttpServletResponse res, FilterChain chain)
            throws ServletException, IOException {

        ContentCachingRequestWrapper request  = new ContentCachingRequestWrapper(req);
        ContentCachingResponseWrapper response = new ContentCachingResponseWrapper(res);

        String cid = Optional.ofNullable(request.getHeader(HDR_CORRELATION_ID))
                .filter(s -> !s.isBlank())
                .orElse(UUID.randomUUID().toString());

        String consumer = Optional.ofNullable(request.getHeader(HDR_CONSUMER))
                .orElseGet(() -> extractConsumerFromAuth(request));

        Instant start = Instant.now();
        long startMs = System.currentTimeMillis();

        // Put correlation fields into MDC so any downstream logs correlate
        MDC.put("requestId", cid);
        MDC.put("app", appName);

        try {
            chain.doFilter(request, response);
        } finally {
            long endMs = System.currentTimeMillis();
            Instant end = Instant.ofEpochMilli(endMs);
            long duration = endMs - startMs;

            // Safe, small summary of GraphQL body (if this is a GraphQL POST)
            String httpMethod = request.getMethod();
            String path = request.getRequestURI();
            String operationName = null;
            Integer variablesSize = null;

            if ("POST".equalsIgnoreCase(httpMethod) && isJson(request)) {
                try {
                    String body = new String(request.getContentAsByteArray(), StandardCharsets.UTF_8);
                    if (!body.isBlank()) {
                        JsonNode root = MAPPER.readTree(body);
                        if (root.hasNonNull("operationName")) {
                            operationName = root.get("operationName").asText(null);
                        }
                        if (root.has("variables")) {
                            variablesSize = root.get("variables").size();
                        }
                    }
                } catch (Exception ignore) {
                    // Donâ€™t fail the request for logging issues
                }
            }

            // Build one event for Splunk
            Map<String, Object> event = new HashMap<>();
            event.put("appName", appName);
            event.put("CID", cid);
            event.put("Consumer", consumer);
            event.put("StatusCode", response.getStatus());
            event.put("HTTPMethod", httpMethod);
            event.put("PATH", path);
            event.put("StartTimeStamp", start.toString());
            event.put("EndTimeStamp", end.toString());
            event.put("ResponseTimeMillis", duration);

            // Optional GraphQL extras (kept small; avoid PII)
            if (operationName != null) event.put("operationName", operationName);
            if (variablesSize != null) event.put("variablesSize", variablesSize);

            // If you want response size only (not body):
            int respBytes = response.getContentSize();
            event.put("responseSizeBytes", respBytes);

            log.info(MAPPER.writeValueAsString(event));

            // Important: copy cached response back to client
            response.copyBodyToResponse();

            // Clean up MDC
            MDC.clear();
        }
    }

    private boolean isJson(HttpServletRequest req) {
        String ct = req.getContentType();
        return ct != null && ct.toLowerCase().contains("application/json");
    }

    // Replace with your JWT parsing if needed
    private String extractConsumerFromAuth(HttpServletRequest req) {
        String auth = req.getHeader("Authorization");
        if (auth == null || auth.isBlank()) return "unknown";
        // e.g., "Bearer <jwt>", parse JWT client_id if you need;
        // keep it simple to avoid heavy parsing in filter:
        return "bearer";
    }
}

------------------------------------------------------------------------------
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.slf4j.MDC;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import reactor.core.publisher.Mono;

import java.time.Instant;
import java.util.*;

@Component
@Order(Ordered.HIGHEST_PRECEDENCE)
public class GraphqlHttpAuditWebFilter implements WebFilter {

    private static final Logger log = LoggerFactory.getLogger("SPLUNK.AUDIT");
    private static final ObjectMapper MAPPER = new ObjectMapper();

    @Value("${spring.application.name:app}")
    private String appName;

    private static final String HDR_CID = "x-correlation-id";
    private static final String HDR_CONSUMER = "x-consumer";

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        final var req = exchange.getRequest();
        final var res = exchange.getResponse();

        final String cid = Optional.ofNullable(req.getHeaders().getFirst(HDR_CID))
                .filter(s -> !s.isBlank())
                .orElse(UUID.randomUUID().toString());
        final String consumer = Optional.ofNullable(req.getHeaders().getFirst(HDR_CONSUMER))
                .orElse("unknown");

        final Instant start = Instant.now();
        final long startMs = System.currentTimeMillis();

        MDC.put("requestId", cid);
        MDC.put("app", appName);

        return chain.filter(exchange)
            .doOnSuccess(v -> emitLog(exchange, start, startMs, cid, consumer))
            .doOnError(err -> emitLog(exchange, start, startMs, cid, consumer))
            .doFinally(sig -> MDC.clear());
    }

    private void emitLog(ServerWebExchange exchange, Instant start, long startMs, String cid, String consumer) {
        final var req = exchange.getRequest();
        final ServerHttpResponse res = exchange.getResponse();

        long endMs = System.currentTimeMillis();
        long duration = endMs - startMs;
        Instant end = Instant.ofEpochMilli(endMs);

        String method = req.getMethodValue();
        String path = req.getURI().getRawPath();
        HttpStatus status = res.getStatusCode();
        int code = status != null ? status.value() : 200; // default if not set

        Map<String, Object> event = new LinkedHashMap<>();
        event.put("appName", appName);
        event.put("CID", cid);
        event.put("Consumer", consumer);
        event.put("StatusCode", code);
        event.put("HTTPMethod", method);
        event.put("PATH", path);
        event.put("StartTimeStamp", start.toString());
        event.put("EndTimeStamp", end.toString());
        event.put("ResponseTimeMillis", duration);

        try {
            log.info(MAPPER.writeValueAsString(event));
        } catch (Exception e) {
            log.warn("Failed to serialize audit event", e);
        }
    }
}
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
